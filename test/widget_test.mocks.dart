// Mocks generated by Mockito 5.1.0 from annotations
// in ventura_hr/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dio/dio.dart' as _i4;
import 'package:dio/src/headers.dart' as _i2;
import 'package:dio/src/options.dart' as _i3;
import 'package:dio/src/redirect_record.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:ventura_hr/shared/services/dio.service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHeaders_0 extends _i1.Fake implements _i2.Headers {}

class _FakeRequestOptions_1 extends _i1.Fake implements _i3.RequestOptions {}

class _FakeUri_2 extends _i1.Fake implements Uri {}

class _FakeDio_3 extends _i1.Fake implements _i4.Dio {}

class _FakeResponse_4<T> extends _i1.Fake implements _i4.Response<T> {}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i4.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i2.Headers get headers => (super.noSuchMethod(Invocation.getter(#headers),
      returnValue: _FakeHeaders_0()) as _i2.Headers);
  @override
  set headers(_i2.Headers? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i3.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions_1()) as _i3.RequestOptions);
  @override
  set requestOptions(_i3.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set statusCode(int? _statusCode) =>
      super.noSuchMethod(Invocation.setter(#statusCode, _statusCode),
          returnValueForMissingStub: null);
  @override
  set statusMessage(String? _statusMessage) =>
      super.noSuchMethod(Invocation.setter(#statusMessage, _statusMessage),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  List<_i5.RedirectRecord> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i5.RedirectRecord>[]) as List<_i5.RedirectRecord>);
  @override
  set redirects(List<_i5.RedirectRecord>? _redirects) =>
      super.noSuchMethod(Invocation.setter(#redirects, _redirects),
          returnValueForMissingStub: null);
  @override
  set isRedirect(bool? _isRedirect) =>
      super.noSuchMethod(Invocation.setter(#isRedirect, _isRedirect),
          returnValueForMissingStub: null);
  @override
  Uri get realUri => (super.noSuchMethod(Invocation.getter(#realUri),
      returnValue: _FakeUri_2()) as Uri);
}

/// A class which mocks [DioService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioService extends _i1.Mock implements _i6.DioService {
  MockDioService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio_3())
          as _i4.Dio);
  @override
  _i7.Future<_i4.Response<dynamic>> delete<T>(String? path,
          {_i4.CancelToken? cancelToken,
          String? contentType,
          List<String>? cookies,
          bool? useCache = true}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [
                path
              ], {
                #cancelToken: cancelToken,
                #contentType: contentType,
                #cookies: cookies,
                #useCache: useCache
              }),
              returnValue: Future<_i4.Response<dynamic>>.value(
                  _FakeResponse_4<dynamic>()))
          as _i7.Future<_i4.Response<dynamic>>);
  @override
  _i7.Future<_i4.Response<T>> get<T>(String? path,
          {_i4.CancelToken? cancelToken,
          List<String>? cookies,
          bool? useCache = true}) =>
      (super.noSuchMethod(
              Invocation.method(#get, [
                path
              ], {
                #cancelToken: cancelToken,
                #cookies: cookies,
                #useCache: useCache
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_4<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<T>> post<T>(String? path, dynamic body,
          {bool? useCookies = false,
          String? contentType,
          List<String>? cookies,
          _i4.CancelToken? cancelToken,
          bool? useCache = true}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [
                path,
                body
              ], {
                #useCookies: useCookies,
                #contentType: contentType,
                #cookies: cookies,
                #cancelToken: cancelToken,
                #useCache: useCache
              }),
              returnValue: Future<_i4.Response<T>>.value(_FakeResponse_4<T>()))
          as _i7.Future<_i4.Response<T>>);
  @override
  _i7.Future<_i4.Response<dynamic>> put<T>(String? path, dynamic body,
          {bool? useCookies = false,
          String? contentType,
          List<String>? cookies,
          _i4.CancelToken? cancelToken,
          bool? useCache = true}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [
                path,
                body
              ], {
                #useCookies: useCookies,
                #contentType: contentType,
                #cookies: cookies,
                #cancelToken: cancelToken,
                #useCache: useCache
              }),
              returnValue: Future<_i4.Response<dynamic>>.value(
                  _FakeResponse_4<dynamic>()))
          as _i7.Future<_i4.Response<dynamic>>);
}
