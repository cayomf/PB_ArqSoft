enum ResultTypes {
  ok,
  created,
  accepted,
  nonAuthoritativeInformation,
  noContent,
  resetContent,
  partialContent,
  multiStatus,
  alreadyReported,
  imUsed,
  ambiguous,
  movedPermanently,
  redirect,
  seeOther,
  notModified,
  useProxy,
  unused,
  temporaryRedirect,
  permanentRedirect,
  badRequest,
  unauthorized,
  paymentRequired,
  forbidden,
  notFound,
  methodNotAllowed,
  notAcceptable,
  proxyAuthenticationRequired,
  requestTimeout,
  conflict,
  gone,
  lengthRequired,
  preconditionFailed,
  requestEntityTooLarge,
  requestUriTooLong,
  unsupportedMediaType,
  requestedRangeNotSatisfiable,
  expectationFailed,
  misdirectedRequest,
  unprocessableEntity,
  locked,
  failedDependency,
  upgradeRequired,
  preconditionRequired,
  tooManyRequests,
  requestHeaderFieldsTooLarge,
  unavailableForLegalReasons,
  internalServerError,
  notImplemented,
  badGateway,
  serviceUnavailable,
  gatewayTimeout,
  httpVersionNotSupported,
  variantAlsoNegotiates,
  insufficientStorage,
  loopDetected,
  notExtended,
  networkAuthenticationRequired,
  cancelledToken
}

extension ResultTypeExtension on ResultTypes {
  static const codes = {
    ResultTypes.ok: 200,
    ResultTypes.created: 201,
    ResultTypes.accepted: 202,
    ResultTypes.nonAuthoritativeInformation: 203,
    ResultTypes.noContent: 204,
    ResultTypes.resetContent: 205,
    ResultTypes.partialContent: 206,
    ResultTypes.multiStatus: 207,
    ResultTypes.alreadyReported: 208,
    ResultTypes.imUsed: 226,
    ResultTypes.ambiguous: 300,
    ResultTypes.movedPermanently: 301,
    ResultTypes.redirect: 302,
    ResultTypes.seeOther: 303,
    ResultTypes.notModified: 304,
    ResultTypes.useProxy: 305,
    ResultTypes.unused: 306,
    ResultTypes.temporaryRedirect: 307,
    ResultTypes.permanentRedirect: 308,
    ResultTypes.badRequest: 400,
    ResultTypes.unauthorized: 401,
    ResultTypes.paymentRequired: 402,
    ResultTypes.forbidden: 403,
    ResultTypes.notFound: 404,
    ResultTypes.methodNotAllowed: 405,
    ResultTypes.notAcceptable: 406,
    ResultTypes.proxyAuthenticationRequired: 407,
    ResultTypes.requestTimeout: 408,
    ResultTypes.conflict: 409,
    ResultTypes.gone: 410,
    ResultTypes.lengthRequired: 411,
    ResultTypes.preconditionFailed: 412,
    ResultTypes.requestEntityTooLarge: 413,
    ResultTypes.requestUriTooLong: 414,
    ResultTypes.unsupportedMediaType: 415,
    ResultTypes.requestedRangeNotSatisfiable: 416,
    ResultTypes.expectationFailed: 417,
    ResultTypes.misdirectedRequest: 421,
    ResultTypes.unprocessableEntity: 422,
    ResultTypes.locked: 423,
    ResultTypes.failedDependency: 424,
    ResultTypes.upgradeRequired: 426,
    ResultTypes.preconditionRequired: 428,
    ResultTypes.tooManyRequests: 429,
    ResultTypes.requestHeaderFieldsTooLarge: 431,
    ResultTypes.unavailableForLegalReasons: 451,
    ResultTypes.internalServerError: 500,
    ResultTypes.notImplemented: 501,
    ResultTypes.badGateway: 502,
    ResultTypes.serviceUnavailable: 503,
    ResultTypes.gatewayTimeout: 504,
    ResultTypes.httpVersionNotSupported: 505,
    ResultTypes.variantAlsoNegotiates: 506,
    ResultTypes.insufficientStorage: 507,
    ResultTypes.loopDetected: 508,
    ResultTypes.notExtended: 510,
    ResultTypes.networkAuthenticationRequired: 511,
    ResultTypes.cancelledToken: 900
  };
  int get code => codes[this]!;
}

extension IntResultTypeExtension on int? {
  static const codes = {
    200: ResultTypes.ok,
    201: ResultTypes.created,
    202: ResultTypes.accepted,
    203: ResultTypes.nonAuthoritativeInformation,
    204: ResultTypes.noContent,
    205: ResultTypes.resetContent,
    206: ResultTypes.partialContent,
    207: ResultTypes.multiStatus,
    208: ResultTypes.alreadyReported,
    226: ResultTypes.imUsed,
    300: ResultTypes.ambiguous,
    301: ResultTypes.movedPermanently,
    302: ResultTypes.redirect,
    303: ResultTypes.seeOther,
    304: ResultTypes.notModified,
    305: ResultTypes.useProxy,
    306: ResultTypes.unused,
    307: ResultTypes.temporaryRedirect,
    308: ResultTypes.permanentRedirect,
    400: ResultTypes.badRequest,
    401: ResultTypes.unauthorized,
    402: ResultTypes.paymentRequired,
    403: ResultTypes.forbidden,
    404: ResultTypes.notFound,
    405: ResultTypes.methodNotAllowed,
    406: ResultTypes.notAcceptable,
    407: ResultTypes.proxyAuthenticationRequired,
    408: ResultTypes.requestTimeout,
    409: ResultTypes.conflict,
    410: ResultTypes.gone,
    411: ResultTypes.lengthRequired,
    412: ResultTypes.preconditionFailed,
    413: ResultTypes.requestEntityTooLarge,
    414: ResultTypes.requestUriTooLong,
    415: ResultTypes.unsupportedMediaType,
    416: ResultTypes.requestedRangeNotSatisfiable,
    417: ResultTypes.expectationFailed,
    421: ResultTypes.misdirectedRequest,
    422: ResultTypes.unprocessableEntity,
    423: ResultTypes.locked,
    424: ResultTypes.failedDependency,
    426: ResultTypes.upgradeRequired,
    428: ResultTypes.preconditionRequired,
    429: ResultTypes.tooManyRequests,
    431: ResultTypes.requestHeaderFieldsTooLarge,
    451: ResultTypes.unavailableForLegalReasons,
    500: ResultTypes.internalServerError,
    501: ResultTypes.notImplemented,
    502: ResultTypes.badGateway,
    503: ResultTypes.serviceUnavailable,
    504: ResultTypes.gatewayTimeout,
    505: ResultTypes.httpVersionNotSupported,
    506: ResultTypes.variantAlsoNegotiates,
    507: ResultTypes.insufficientStorage,
    508: ResultTypes.loopDetected,
    510: ResultTypes.notExtended,
    511: ResultTypes.networkAuthenticationRequired,
    900: ResultTypes.cancelledToken,
    null: ResultTypes.internalServerError
  };
  ResultTypes toResultType() => codes[this]!;
}
